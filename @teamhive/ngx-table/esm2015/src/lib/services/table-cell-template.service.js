import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { TableCellTemplate } from '../models';
let TableCellTemplateService = class TableCellTemplateService {
    constructor() {
        this.templates = new Array();
    }
    register(scope, tableId, columnId, templateRef) {
        this.templates.push(new TableCellTemplate(scope, tableId, columnId, templateRef));
    }
    hasHeaders(tableId) {
        return this.templates.some((t) => t.scope === 'header-cell' && t.tableId === tableId);
    }
    getRowCellTemplateRef(tableId, columnId) {
        const template = this.templates.find((t) => t.id === columnId && t.scope === 'row-cell' && t.tableId === tableId);
        return template ? template.ref : null;
    }
    getHeaderCellTemplateRef(tableId, columnId) {
        const template = this.templates.find((t) => t.id === columnId && t.scope === 'header-cell' && t.tableId === tableId);
        return template ? template.ref : null;
    }
};
TableCellTemplateService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], TableCellTemplateService);
export { TableCellTemplateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtY2VsbC10ZW1wbGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRlYW1oaXZlL25neC10YWJsZS8iLCJzb3VyY2VzIjpbInNyYy9saWIvc2VydmljZXMvdGFibGUtY2VsbC10ZW1wbGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBMEIsTUFBTSxXQUFXLENBQUM7QUFHdEUsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUFHakM7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUE2QixFQUFFLE9BQWUsRUFBRSxRQUFnQixFQUFFLFdBQTZCO1FBQ3BHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQWU7UUFDdEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxhQUFhLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQscUJBQXFCLENBQUMsT0FBZSxFQUFFLFFBQWdCO1FBQ25ELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLFVBQVUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1FBRWxILE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDMUMsQ0FBQztJQUVELHdCQUF3QixDQUFDLE9BQWUsRUFBRSxRQUFnQjtRQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxhQUFhLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQztRQUVySCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFDLENBQUM7Q0FDSixDQUFBO0FBMUJZLHdCQUF3QjtJQURwQyxVQUFVLEVBQUU7O0dBQ0Esd0JBQXdCLENBMEJwQztTQTFCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVDZWxsVGVtcGxhdGUsIFRhYmxlQ2VsbFRlbXBsYXRlU2NvcGUgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGFibGVDZWxsVGVtcGxhdGVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHRlbXBsYXRlczogQXJyYXk8VGFibGVDZWxsVGVtcGxhdGU+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVzID0gbmV3IEFycmF5KCk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoc2NvcGU6IFRhYmxlQ2VsbFRlbXBsYXRlU2NvcGUsIHRhYmxlSWQ6IHN0cmluZywgY29sdW1uSWQ6IHN0cmluZywgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMucHVzaChuZXcgVGFibGVDZWxsVGVtcGxhdGUoc2NvcGUsIHRhYmxlSWQsIGNvbHVtbklkLCB0ZW1wbGF0ZVJlZikpO1xuICAgIH1cblxuICAgIGhhc0hlYWRlcnModGFibGVJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlcy5zb21lKCh0KSA9PiB0LnNjb3BlID09PSAnaGVhZGVyLWNlbGwnICYmIHQudGFibGVJZCA9PT0gdGFibGVJZCk7XG4gICAgfVxuXG4gICAgZ2V0Um93Q2VsbFRlbXBsYXRlUmVmKHRhYmxlSWQ6IHN0cmluZywgY29sdW1uSWQ6IHN0cmluZyk6IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVzLmZpbmQoKHQpID0+IHQuaWQgPT09IGNvbHVtbklkICYmIHQuc2NvcGUgPT09ICdyb3ctY2VsbCcgJiYgdC50YWJsZUlkID09PSB0YWJsZUlkKTtcblxuICAgICAgICByZXR1cm4gdGVtcGxhdGUgPyB0ZW1wbGF0ZS5yZWYgOiBudWxsO1xuICAgIH1cblxuICAgIGdldEhlYWRlckNlbGxUZW1wbGF0ZVJlZih0YWJsZUlkOiBzdHJpbmcsIGNvbHVtbklkOiBzdHJpbmcpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlcy5maW5kKCh0KSA9PiB0LmlkID09PSBjb2x1bW5JZCAmJiB0LnNjb3BlID09PSAnaGVhZGVyLWNlbGwnICYmIHQudGFibGVJZCA9PT0gdGFibGVJZCk7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlID8gdGVtcGxhdGUucmVmIDogbnVsbDtcbiAgICB9XG59XG4iXX0=