{"version":3,"file":"teamhive-ngx-table.js","sources":["ng://@teamhive/ngx-table/src/lib/models/table-cell-template.model.ts","ng://@teamhive/ngx-table/src/lib/services/table-cell-template.service.ts","ng://@teamhive/ngx-table/src/lib/services/index.ts","ng://@teamhive/ngx-table/src/lib/components/ngx-table/table.component.ts","ng://@teamhive/ngx-table/src/lib/components/index.ts","ng://@teamhive/ngx-table/src/lib/directives/table-header-cell-template.directive.ts","ng://@teamhive/ngx-table/src/lib/directives/table-row-cell-template.directive.ts","ng://@teamhive/ngx-table/src/lib/directives/index.ts","ng://@teamhive/ngx-table/src/lib/ngx-table.module.ts","ng://@teamhive/ngx-table/teamhive-ngx-table.ts"],"sourcesContent":["import { TemplateRef } from '@angular/core';\n\nexport class TableCellTemplate {\n    constructor(\n        public scope: TableCellTemplateScope,\n        public tableId: string,\n        public id: string,\n        public ref: TemplateRef<any>\n    ) { }\n}\n\nexport type TableCellTemplateScope = 'header-cell' | 'row-cell';\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { TableCellTemplate, TableCellTemplateScope } from '../models';\n\n@Injectable()\nexport class TableCellTemplateService {\n    private templates: Array<TableCellTemplate>;\n\n    constructor() {\n        this.templates = new Array();\n    }\n\n    register(scope: TableCellTemplateScope, tableId: string, columnId: string, templateRef: TemplateRef<any>) {\n        this.templates.push(new TableCellTemplate(scope, tableId, columnId, templateRef));\n    }\n\n    hasHeaders(tableId: string): boolean {\n        return this.templates.some((t) => t.scope === 'header-cell' && t.tableId === tableId);\n    }\n\n    getRowCellTemplateRef(tableId: string, columnId: string): TemplateRef<any> {\n        const template = this.templates.find((t) => t.id === columnId && t.scope === 'row-cell' && t.tableId === tableId);\n\n        return template ? template.ref : null;\n    }\n\n    getHeaderCellTemplateRef(tableId: string, columnId: string): TemplateRef<any> {\n        const template = this.templates.find((t) => t.id === columnId && t.scope === 'header-cell' && t.tableId === tableId);\n\n        return template ? template.ref : null;\n    }\n}\n","import { TableCellTemplateService } from './table-cell-template.service';\n\nexport const NgxTableServices = [\n    TableCellTemplateService\n];\n\nexport * from './table-cell-template.service';\n","import { Component, ContentChildren, Input, TemplateRef } from '@angular/core';\nimport { HeaderCellContext, RowCellContext, TableColumnConfiguration, TableConfiguration } from '../../models';\nimport { TableCellTemplateService } from '../../services';\n\n@Component({\n    selector: 'ngx-table',\n    styleUrls: ['table.component.scss'],\n    templateUrl: 'table.component.html'\n})\nexport class NgxTableComponent<DataT, ColumnConfigT extends TableColumnConfiguration> {\n    @ContentChildren(TemplateRef) cellTemplates: TemplateRef<any>[];\n\n    @Input() configuration: TableConfiguration<DataT, ColumnConfigT>;\n    @Input() autosize = false;\n\n    @Input() items: DataT[] = [];\n\n    private readonly widthUnits: RegExp = /em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|px|pt|pc|%/gm;\n\n    constructor(protected tableCellTemplateService: TableCellTemplateService) { }\n\n    getColumnSize(columnName: keyof DataT): {[key: string]: string | number} {\n        if (this.autosize) {\n            return { flex: '1 0 0' };\n        }\n\n        const definition = this.getColumnDefinition(columnName);\n\n        if (definition) {\n            if (definition.columnSize) {\n\n                const columnSize: string = definition.columnSize+'';\n\n                if (this.widthUnits.test(columnSize) === true) {\n                    return { flex: `0 0 ${columnSize}` };\n                }\n                else {\n                    return { flex: `${columnSize} 0 0` };\n                }\n            }\n        }\n\n        return { flex: '1 0 0' };\n    }\n\n    onRowClick(item: DataT) {\n      if (this.configuration.onRowClick) {\n        this.configuration.onRowClick(item);\n      }\n    }\n\n    getColumnDefinition(columnName: keyof DataT): ColumnConfigT | undefined {\n        if (this.configuration.definitions) {\n            return this.configuration.definitions[columnName];\n        }\n\n        return undefined;\n    }\n\n    hasHeaders() {\n        return this.tableCellTemplateService.hasHeaders(this.configuration.tableId);\n    }\n\n    getTemplateForHeaderCell(cellId: keyof DataT): TemplateRef<any> {\n        return this.tableCellTemplateService.getHeaderCellTemplateRef(this.configuration.tableId, cellId as string);\n    }\n\n    getTemplateForRowCell(cellId: keyof DataT): TemplateRef<any> {\n        return this.tableCellTemplateService.getRowCellTemplateRef(this.configuration.tableId, cellId as string);\n    }\n\n    getHeaderCellContext(columnId: keyof DataT): HeaderCellContext {\n        return {\n            definition: this.getColumnDefinition(columnId),\n            columnId: columnId,\n            tableId: this.configuration.tableId\n        };\n    }\n\n    getRowCellContext(columnId: keyof DataT, item: DataT): RowCellContext {\n        return {\n            data: item,\n            columnId: columnId,\n            tableId: this.configuration.tableId\n        };\n    }\n}\n","import { NgxTableComponent } from './ngx-table/table.component';\n\nexport const NgxTableComponents = [\n    NgxTableComponent\n];\n\nexport * from './ngx-table/table.component';\n","import { Directive, Input, OnInit, TemplateRef } from '@angular/core';\nimport { NgxTableComponent } from '../components';\nimport { TableCellTemplateService } from '../services';\n\n@Directive({\n    selector: '[ngxHeader]'\n})\nexport class NgxTableHeaderCellTemplateDirective implements OnInit {\n   @Input() ngxHeader: string;\n\n   constructor(\n       protected host: TemplateRef<any>,\n       protected service: TableCellTemplateService,\n       protected ngxTable: NgxTableComponent<any, any>\n    ) { }\n\n   ngOnInit() {\n       this.service.register('header-cell', this.ngxTable.configuration.tableId, this.ngxHeader, this.host);\n   }\n}\n","import { Directive, Input, OnInit, TemplateRef } from '@angular/core';\nimport { NgxTableComponent } from '../components';\nimport { TableCellTemplateService } from '../services';\n\n@Directive({\n    selector: '[ngxColumn]'\n})\nexport class NgxTableRowCellTemplateDirective implements OnInit {\n   @Input() ngxColumn: string;\n\n   constructor(\n       protected host: TemplateRef<any>,\n       protected service: TableCellTemplateService,\n       protected ngxTable: NgxTableComponent<any, any>\n    ) { }\n\n   ngOnInit() {\n       this.service.register('row-cell', this.ngxTable.configuration.tableId ,this.ngxColumn, this.host);\n   }\n}\n","import { NgxTableHeaderCellTemplateDirective } from './table-header-cell-template.directive';\nimport { NgxTableRowCellTemplateDirective } from './table-row-cell-template.directive';\n\nexport const NgxTableDirectives = [\n    NgxTableRowCellTemplateDirective,\n    NgxTableHeaderCellTemplateDirective\n];\n\nexport * from './table-header-cell-template.directive';\nexport * from './table-row-cell-template.directive';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxTableComponents } from './components';\nimport { NgxTableDirectives } from './directives';\nimport { NgxTableServices } from './services';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ...NgxTableComponents,\n    ...NgxTableDirectives\n  ],\n  providers: [\n    ...NgxTableServices\n  ],\n  exports: [\n    ...NgxTableComponents,\n    ...NgxTableDirectives\n  ]\n})\nexport class NgxTableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate"],"mappings":"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"}